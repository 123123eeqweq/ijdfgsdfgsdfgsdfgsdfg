const mongoose = require('mongoose');

const polygonCryptoCandleSchema = new mongoose.Schema({
  pair: {
    type: String,
    required: true,
    index: true
  },
  open: {
    type: Number,
    required: true
  },
  high: {
    type: Number,
    required: true
  },
  low: {
    type: Number,
    required: true
  },
  close: {
    type: Number,
    required: true
  },
  volume: {
    type: Number,
    required: true
  },
  startTime: {
    type: Number, // Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    required: true,
    index: true
  },
  endTime: {
    type: Number, // Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    required: true
  },
  timeframe: {
    type: Number, // –í —Å–µ–∫—É–Ω–¥–∞—Ö (5 –¥–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π)
    required: true,
    default: 5
  },
  isClosed: {
    type: Boolean,
    required: true,
    default: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ (–∞–∫—Ç–∏–≤–Ω–∞—è)
    index: true
  },
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫—Ä–∏–ø—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  vw: {
    type: Number, // Volume weighted average price
    required: false
  },
  z: {
    type: Number, // Average trade size
    required: false
  }
}, {
  timestamps: true // –î–æ–±–∞–≤–ª—è–µ—Ç createdAt –∏ updatedAt
});

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ä–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
polygonCryptoCandleSchema.index({ pair: 1, startTime: 1 }, { unique: true });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
polygonCryptoCandleSchema.index({ startTime: -1 });

// üî• –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º isClosed
// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã: find({ pair, isClosed: true }).sort({ startTime: -1 })
polygonCryptoCandleSchema.index({ pair: 1, isClosed: 1, startTime: -1 });

const PolygonCryptoCandle = mongoose.model('PolygonCryptoCandle', polygonCryptoCandleSchema);

module.exports = PolygonCryptoCandle;

