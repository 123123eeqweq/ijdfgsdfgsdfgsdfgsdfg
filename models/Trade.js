const mongoose = require('mongoose');

const tradeSchema = new mongoose.Schema({
  tradeId: {
    type: Number,
    unique: true,
    index: true
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (8-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ)
  },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  pair: {
    type: String,
    required: true,
    index: true
  },
  accountType: {
    type: String,
    required: true,
    enum: ['demo', 'real'],
    default: 'demo',
    index: true
  },
  amount: {
    type: Number,
    required: true,
    min: 1
  },
  direction: {
    type: String,
    required: true,
    enum: ['up', 'down'], // 'up' = CALL, 'down' = PUT
    index: true
  },
  payout: {
    type: Number,
    required: true,
    default: 94 // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (94% = –ø–æ–ª—É—á–∏—à—å 194% –æ—Ç —Å—Ç–∞–≤–∫–∏)
  },
  entryPrice: {
    type: Number,
    required: true
  },
  entryTime: {
    type: Number, // Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    required: true,
    index: true
  },
  expirationTime: {
    type: Number, // Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    required: true,
    index: true
  },
  expirationSeconds: {
    type: Number, // –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    required: true
  },
  closePrice: {
    type: Number,
    default: null
  },
  closeTime: {
    type: Number,
    default: null
  },
  status: {
    type: String,
    required: true,
    enum: ['active', 'won', 'lost', 'return', 'cancelled'], // üî• –î–û–ë–ê–í–ò–õ–ò: 'return' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    default: 'active',
    index: true
  },
  profit: {
    type: Number,
    default: 0 // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = –≤—ã–∏–≥—Ä—ã—à, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –ø—Ä–æ–∏–≥—Ä—ã—à
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è tradeId –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
tradeSchema.pre('save', async function(next) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º tradeId —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
  if (this.isNew && !this.tradeId) {
    let isUnique = false;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (!isUnique && attempts < maxAttempts) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ 8-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ (10000000 - 99999999)
      const randomId = Math.floor(10000000 + Math.random() * 90000000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      const existingTrade = await this.constructor.findOne({ tradeId: randomId });
      
      if (!existingTrade) {
        this.tradeId = randomId;
        isUnique = true;
        console.log(`‚úÖ –ü—Ä–∏—Å–≤–æ–µ–Ω tradeId: ${randomId}`);
      }
      
      attempts++;
    }
    
    if (!isUnique) {
      return next(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π tradeId'));
    }
  }
  
  next();
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
tradeSchema.index({ userId: 1, status: 1 });
tradeSchema.index({ status: 1, expirationTime: 1 });

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ updatedAt –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
tradeSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('Trade', tradeSchema);

