const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  userId: {
    type: Number,
    unique: true,
    index: true
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  firstName: {
    type: String,
    required: true,
    trim: true
  },
  lastName: {
    type: String,
    required: true,
    trim: true
  },
  phone: {
    type: String,
    trim: true
  },
  country: {
    type: String,
    trim: true
  },
  currency: {
    type: String,
    trim: true
  },
  // üí∞ –î–µ–º–æ —Å—á–µ—Ç (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  demoBalance: {
    type: Number,
    default: 10000, // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å $10,000 –Ω–∞ –¥–µ–º–æ
    min: 0
  },
  // üíµ –†–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
  realBalance: {
    type: Number,
    default: 0,
    min: 0
  },
  isVerified: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è userId –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
userSchema.pre('save', async function(next) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º userId —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (this.isNew && !this.userId) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º userId
      const lastUser = await this.constructor.findOne({}, { userId: 1 })
        .sort({ userId: -1 })
        .limit(1);
      
      if (lastUser && lastUser.userId) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
        this.userId = lastUser.userId + 1;
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1000000
        this.userId = 1000000;
      }
      
      console.log(`‚úÖ –ü—Ä–∏—Å–≤–æ–µ–Ω userId: ${this.userId} –¥–ª—è ${this.email}`);
    } catch (error) {
      return next(error);
    }
  }
  
  next();
});

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
userSchema.methods.comparePassword = async function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ updatedAt –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
userSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('User', userSchema);
