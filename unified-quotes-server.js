/**
 * üéØ Unified Quotes Server - –û–¥–∏–Ω WebSocket –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
 * 1. Polygon Forex (CAS —Å–æ–±—ã—Ç–∏—è)
 * 2. Polygon Crypto (XAS —Å–æ–±—ã—Ç–∏—è)
 * 3. OTC Synthetic (OTC —Å–æ–±—ã—Ç–∏—è)
 * 
 * –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –û–î–ò–ù –ø–æ—Ä—Ç –¥–ª—è Render.com
 */

const WebSocket = require('ws');
const fetch = require('node-fetch');
require('dotenv').config();

const PORT = process.env.PORT || 3001;
const POLYGON_API_KEY = process.env.POLYGON_API_KEY;

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const wss = new WebSocket.Server({ port: PORT });

console.log(`üöÄ Unified Quotes Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
console.log(`üì° –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π WebSocket: ws://localhost:${PORT}`);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
const clients = new Set();

// ============================================
// üî• 1. POLYGON FOREX (CAS —Å–æ–±—ã—Ç–∏—è)
// ============================================

let polygonForexWs = null;

function connectPolygonForex() {
  if (!POLYGON_API_KEY) {
    console.warn('‚ö†Ô∏è POLYGON_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Forex –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    return;
  }

  const url = `wss://socket.polygon.io/forex`;
  
  try {
    polygonForexWs = new WebSocket(url);
    
    polygonForexWs.on('open', () => {
      console.log('‚úÖ Polygon Forex WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      polygonForexWs.send(JSON.stringify({
        action: 'auth',
        params: POLYGON_API_KEY
      }));
    });
    
    polygonForexWs.on('message', (data) => {
      try {
        const parsed = JSON.parse(data.toString());
        const messages = Array.isArray(parsed) ? parsed : [parsed];
        
        console.log('üì® Polygon Forex —Å–æ–æ–±—â–µ–Ω–∏–µ:', JSON.stringify(messages).substring(0, 200));
        
        messages.forEach(msg => {
          // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ä—ã
          if (msg.ev === 'status' && msg.status === 'auth_success') {
            console.log('üîê Polygon Forex –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 20 Forex –ø–∞—Ä (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: CAS.EUR/USD)
            polygonForexWs.send(JSON.stringify({
              action: 'subscribe',
              params: 'CAS.EUR/USD,CAS.AUD/CAD,CAS.USD/JPY,CAS.AUD/JPY,CAS.GBP/USD,CAS.GBP/CAD,CAS.EUR/CAD,CAS.CHF/JPY,CAS.CAD/CHF,CAS.USD/CHF,CAS.USD/CAD,CAS.GBP/AUD,CAS.AUD/CHF,CAS.EUR/CHF,CAS.GBP/CHF,CAS.CAD/JPY,CAS.EUR/JPY,CAS.GBP/JPY,CAS.EUR/GBP'
            }));
            
            console.log('üì° Polygon Forex: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 19 Forex –ø–∞—Ä');
          }
          
          // –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π - –ø—Ä–æ—Å—Ç–æ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å!
          if (msg.ev === 'CAS') {
            console.log('üíπ Forex –¥–∞–Ω–Ω—ã–µ:', msg.p, msg.c);
            broadcastToClients(msg);
          }
        });
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Forex:', err);
      }
    });
    
    polygonForexWs.on('close', () => {
      console.log('üî¥ Polygon Forex –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...');
      setTimeout(connectPolygonForex, 5000);
    });
    
    polygonForexWs.on('error', (err) => {
      console.error('‚ùå Polygon Forex –æ—à–∏–±–∫–∞:', err.message);
    });
    
  } catch (err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Polygon Forex:', err.message);
    setTimeout(connectPolygonForex, 10000);
  }
}

// ============================================
// üî• 2. POLYGON CRYPTO (XAS —Å–æ–±—ã—Ç–∏—è)
// ============================================

let polygonCryptoWs = null;

function connectPolygonCrypto() {
  if (!POLYGON_API_KEY) {
    console.warn('‚ö†Ô∏è POLYGON_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Crypto –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    return;
  }

  const url = `wss://socket.polygon.io/crypto`;
  
  try {
    polygonCryptoWs = new WebSocket(url);
    
    polygonCryptoWs.on('open', () => {
      console.log('‚úÖ Polygon Crypto WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      polygonCryptoWs.send(JSON.stringify({
        action: 'auth',
        params: POLYGON_API_KEY
      }));
    });
    
    polygonCryptoWs.on('message', (data) => {
      try {
        const parsed = JSON.parse(data.toString());
        const messages = Array.isArray(parsed) ? parsed : [parsed];
        
        messages.forEach(msg => {
          // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ä—ã
          if (msg.ev === 'status' && msg.status === 'auth_success') {
            console.log('üîê Polygon Crypto –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 10 Crypto –ø–∞—Ä (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: XAS.BTC-USD)
            polygonCryptoWs.send(JSON.stringify({
              action: 'subscribe',
              params: 'XAS.BTC-USD,XAS.ETH-USD,XAS.LTC-USD,XAS.XRP-USD,XAS.SOL-USD,XAS.ADA-USD,XAS.DOT-USD,XAS.MATIC-USD,XAS.AVAX-USD,XAS.LINK-USD'
            }));
            
            console.log('üì° Polygon Crypto: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 10 Crypto –ø–∞—Ä');
          }
          
          // –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π - –ø—Ä–æ—Å—Ç–æ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å!
          if (msg.ev === 'XAS') {
            broadcastToClients(msg);
          }
        });
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    });
    
    polygonCryptoWs.on('close', () => {
      console.log('üî¥ Polygon Crypto –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...');
      setTimeout(connectPolygonCrypto, 5000);
    });
    
    polygonCryptoWs.on('error', (err) => {
      console.error('‚ùå Polygon Crypto –æ—à–∏–±–∫–∞:', err.message);
    });
    
  } catch (err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Polygon Crypto:', err.message);
    setTimeout(connectPolygonCrypto, 10000);
  }
}

// ============================================
// üî• 3. OTC SYNTHETIC (OTC —Å–æ–±—ã—Ç–∏—è)
// ============================================

// –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OTC –¥–∞–Ω–Ω—ã—Ö
const otcBasePrices = {
  'EUR/USD': 1.08500,
  'AUD/CAD': 0.90500,
  'USD/JPY': 149.500,
  'AUD/JPY': 97.5000,
  'GBP/USD': 1.26500,
  'GBP/CAD': 1.75500,
  'EUR/CAD': 1.46500,
  'CHF/JPY': 170.500,
  'CAD/CHF': 0.62500,
  'USD/CHF': 0.88500,
  'USD/CAD': 1.40500,
  'GBP/AUD': 2.06500,
  'AUD/CHF': 0.56500,
  'EUR/CHF': 0.96500,
  'GBP/CHF': 1.12500,
  'CAD/JPY': 106.500,
  'EUR/JPY': 162.500,
  'EUR/GBP': 0.85500,
  'AUD/USD': 0.65500,
  'NZD/USD': 0.59500
};

function startOTCGeneration() {
  console.log('‚úÖ OTC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è', Object.keys(otcBasePrices).length, '–ø–∞—Ä');
  
  setInterval(() => {
    Object.entries(otcBasePrices).forEach(([pair, basePrice]) => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ¬±0.05%
      const change = (Math.random() - 0.5) * 0.001 * basePrice;
      const newPrice = basePrice + change;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É (–ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
      otcBasePrices[pair] = newPrice;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC
      const open = basePrice;
      const close = newPrice;
      const high = Math.max(open, close) * (1 + Math.random() * 0.0001);
      const low = Math.min(open, close) * (1 - Math.random() * 0.0001);
      
      const otcMsg = {
        ev: 'OTC',
        pair: pair,
        o: open,
        c: close,
        h: high,
        l: low,
        v: Math.floor(Math.random() * 100),
        s: Date.now()
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      broadcastToClients(otcMsg);
    });
  }, 1000); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
}

// ============================================
// üî• BROADCAST —Ñ—É–Ω–∫—Ü–∏—è
// ============================================

function broadcastToClients(message) {
  const data = JSON.stringify(message);
  
  clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(data);
    }
  });
}

// ============================================
// üî• –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
// ============================================

wss.on('connection', (ws) => {
  console.log('üë§ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ:', clients.size + 1);
  clients.add(ws);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  ws.send(JSON.stringify({
    ev: 'status',
    message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Unified Quotes Server',
    types: ['OTC', 'CAS', 'XAS']
  }));
  
  ws.on('close', () => {
    clients.delete(ws);
    console.log('üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û—Å—Ç–∞–ª–æ—Å—å:', clients.size);
  });
  
  ws.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', err.message);
  });
});

// ============================================
// üî• –ó–ê–ü–£–°–ö –í–°–ï–• –ò–°–¢–û–ß–ù–ò–ö–û–í
// ============================================

connectPolygonForex();
connectPolygonCrypto();
startOTCGeneration();

// ============================================
// üî• GRACEFUL SHUTDOWN
// ============================================

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  
  if (polygonForexWs) polygonForexWs.close();
  if (polygonCryptoWs) polygonCryptoWs.close();
  
  wss.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  
  if (polygonForexWs) polygonForexWs.close();
  if (polygonCryptoWs) polygonCryptoWs.close();
  
  wss.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
});

console.log('\nüéâ Unified Quotes Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Polygon Forex + Polygon Crypto + OTC Synthetic');
console.log('üîå –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ ws://localhost:' + PORT + '\n');

