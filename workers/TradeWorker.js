/**
 * ü§ñ TradeWorker - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫
 * 
 * –í–ê–ñ–ù–û: –≠—Ç–æ –°–ï–†–î–¶–ï —Å–∏—Å—Ç–µ–º—ã! –≠—Ç–æ—Ç worker:
 * 1. –ö–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–¥–µ–ª–∫–∏
 * 2. –ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É –Ω–∞ –º–æ–º–µ–Ω—Ç —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
 * 3. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (win/loss)
 * 4. –ù–∞—á–∏—Å–ª—è–µ—Ç/–Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏—Ç
 * 5. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!
 */

const mongoose = require('mongoose');
const Trade = require('../models/Trade');
const User = require('../models/User');
const PriceService = require('../services/PriceService');

// üî• –ü–æ–¥–∫–ª—é—á–∞–µ–º tradesRelay –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
let tradesRelay = null;
try {
  tradesRelay = require('../tradesRelay');
  console.log('‚úÖ tradesRelay –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ TradeWorker');
} catch (error) {
  console.warn('‚ö†Ô∏è tradesRelay –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–±—ã—Ç–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è');
}

class TradeWorker {
  constructor() {
    this.isRunning = false;
    this.intervalId = null;
    this.CHECK_INTERVAL = 1000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    this.processingTrades = new Set(); // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å worker
   */
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è TradeWorker —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('ü§ñ TradeWorker –∑–∞–ø—É—â–µ–Ω');
    this.isRunning = true;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    this.processExpiredTrades();
    this.intervalId = setInterval(() => {
      this.processExpiredTrades();
    }, this.CHECK_INTERVAL);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è TradeWorker —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    console.log('üõë TradeWorker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.isRunning = false;
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–¥–µ–ª–∫–∏
   */
  async processExpiredTrades() {
    try {
      const now = Date.now();

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è
      const expiredTrades = await Trade.find({
        status: 'active',
        expirationTime: { $lte: now }
      }).limit(100); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100 –∑–∞ —Ä–∞–∑

      if (expiredTrades.length === 0) {
        return; // –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫
      }

      console.log(`‚è∞ –ù–∞–π–¥–µ–Ω–æ ${expiredTrades.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
      for (const trade of expiredTrades) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç—É —Å–¥–µ–ª–∫—É)
        if (this.processingTrades.has(trade._id.toString())) {
          console.log(`‚ö†Ô∏è –°–¥–µ–ª–∫–∞ ${trade._id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        this.processingTrades.add(trade._id.toString());

        try {
          await this.closeTrade(trade);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ ${trade._id}:`, error);
        } finally {
          this.processingTrades.delete(trade._id.toString());
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ TradeWorker.processExpiredTrades:', error);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
   * @param {Trade} trade - –û–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏ –∏–∑ –ë–î
   */
  async closeTrade(trade) {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
      // ============================================
      // üî• –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –¶–ï–ù–£ –ó–ê–ö–†–´–¢–ò–Ø
      // ============================================
      
      const priceData = await PriceService.getPriceAtTime(
        trade.pair,
        trade.expirationTime,
        5000 // –î–æ–ø—É—Å–∫ 5 —Å–µ–∫—É–Ω–¥
      );
      
      const closePrice = priceData.price;
      const closeTime = Date.now();

      console.log(`üìâ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è ${trade.pair} (ID: ${trade._id}): ${closePrice} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${priceData.source}, diff: ${priceData.timeDiff}ms)`);

      // ============================================
      // üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ (–í–´–ò–ì–†–´–®/–ü–†–û–ò–ì–†–´–®/–í–û–ó–í–†–ê–¢)
      // ============================================
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç (—Ü–µ–Ω—ã —Ä–∞–≤–Ω—ã) - –¥–æ–ø—É—Å–∫ 0.00001 –¥–ª—è floating point
      const priceDifference = Math.abs(closePrice - trade.entryPrice);
      const isReturn = priceDifference < 0.00001;
      
      let isWin = false;
      let status = 'lost';
      let profit = 0;
      
      if (isReturn) {
        // üî• –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—Ç - —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å —Ä–æ–≤–Ω–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ
        status = 'return';
        profit = 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∫—É, –±–µ–∑ –¥–æ—Ö–æ–¥–∞
      } else {
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
        if (trade.direction === 'up') {
          isWin = closePrice > trade.entryPrice;
        } else {
          isWin = closePrice < trade.entryPrice;
        }
        
        if (isWin) {
          status = 'won';
          profit = trade.amount * (trade.payout / 100);
        } else {
          status = 'lost';
          profit = -trade.amount;
        }
      }

      // ============================================
      // üî• –í–´–ß–ò–°–õ–Ø–ï–ú –ü–†–û–§–ò–¢ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
      // ============================================

      // ============================================
      // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–î–ï–õ–ö–£
      // ============================================
      
      trade.closePrice = closePrice;
      trade.closeTime = closeTime;
      trade.status = status;
      trade.profit = profit;
      await trade.save({ session });

      // ============================================
      // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      // ============================================
      
      const user = await User.findById(trade.userId).session(session);
      if (!user) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${trade.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª—è—Ç—å
      const balanceField = trade.accountType === 'demo' ? 'demoBalance' : 'realBalance';

      if (status === 'won') {
        // –í—ã–∏–≥—Ä—ã—à: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É + –≤—ã–∏–≥—Ä—ã—à
        user[balanceField] += trade.amount + profit;
      } else if (status === 'return') {
        // üî• –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∫—É
        user[balanceField] += trade.amount;
      }
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à - –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)

      await user.save({ session });

      // ============================================
      // üî• COMMIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
      // ============================================
      
      await session.commitTransaction();

      const emoji = status === 'won' ? 'üéâ' : status === 'return' ? 'üîÑ' : 'üòî';
      console.log(`${emoji} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞: ID ${trade._id} | ${trade.accountType.toUpperCase()} | ${trade.pair} | ${status.toUpperCase()} | Profit: $${profit.toFixed(2)} | User: ${user.email}`);
      console.log(`   Entry: ${trade.entryPrice.toFixed(5)} ‚Üí Close: ${closePrice.toFixed(5)} | Direction: ${trade.direction.toUpperCase()}`);

      // ============================================
      // üî• EVENT-DRIVEN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç—É!
      // ============================================
      
      if (tradesRelay && tradesRelay.internalEmitter) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ EventEmitter
          tradesRelay.internalEmitter.emit('sendToUser', {
            userId: trade.userId.toString(),
            event: 'tradeUpdated',
            data: {
              trade: {
                _id: trade._id,
                pair: trade.pair,
                amount: trade.amount,
                direction: trade.direction,
                payout: trade.payout,
                entryPrice: trade.entryPrice,
                entryTime: trade.entryTime,
                expirationTime: trade.expirationTime,
                expirationSeconds: trade.expirationSeconds,
                closePrice: trade.closePrice,
                closeTime: trade.closeTime,
                status: trade.status,
                profit: trade.profit
              }
            }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
          const balanceData = {
            demoBalance: user.demoBalance,
            realBalance: user.realBalance,
            accountType: trade.accountType,
            change: status === 'won' ? trade.amount + profit : status === 'return' ? trade.amount : 0
          };
          
          console.log(`   üí∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º balanceUpdated:`, JSON.stringify(balanceData));
          
          tradesRelay.internalEmitter.emit('sendToUser', {
            userId: trade.userId.toString(),
            event: 'balanceUpdated',
            data: balanceData
          });

          console.log(`   üì§ WebSocket —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${trade.userId}`);
        } catch (wsError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WS —Å–æ–±—ã—Ç–∏—è:', wsError.message);
          // –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ WS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞
        }
      }

    } catch (error) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
      await session.abortTransaction();
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ ${trade._id}:`, error);
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å —Å–¥–µ–ª–∫—É –∫–∞–∫ failed
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å worker'–∞
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      checkInterval: this.CHECK_INTERVAL,
      processingCount: this.processingTrades.size
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const tradeWorker = new TradeWorker();

module.exports = tradeWorker;

