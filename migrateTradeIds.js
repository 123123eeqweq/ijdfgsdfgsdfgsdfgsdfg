const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI;
const DB_NAME = process.env.DB_NAME || 'vsepoluchitsa_db';

console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ tradeId —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–¥–µ–ª–∫–∞–º\n');

mongoose.connect(MONGODB_URI, {
  dbName: DB_NAME
}).then(async () => {
  console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');
  
  try {
    const db = mongoose.connection.db;
    const tradesCollection = db.collection('trades');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –±–µ–∑ tradeId
    const tradesWithoutId = await tradesCollection.find({ tradeId: { $exists: false } }).toArray();
    
    if (tradesWithoutId.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ —É–∂–µ –∏–º–µ—é—Ç tradeId!\n');
      process.exit(0);
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –±–µ–∑ tradeId: ${tradesWithoutId.length}\n`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
    const usedIds = new Set();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ tradeId
    const existingTrades = await tradesCollection.find({ tradeId: { $exists: true } }).toArray();
    existingTrades.forEach(trade => {
      if (trade.tradeId) {
        usedIds.add(trade.tradeId);
      }
    });
    
    console.log(`üî¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö tradeId: ${usedIds.size}\n`);
    
    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
    const generateUniqueId = () => {
      let id;
      let attempts = 0;
      do {
        id = Math.floor(10000000 + Math.random() * 90000000);
        attempts++;
      } while (usedIds.has(id) && attempts < 100);
      
      if (attempts >= 100) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID');
      }
      
      usedIds.add(id);
      return id;
    };
    
    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º tradeId –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ
    let updated = 0;
    for (const trade of tradesWithoutId) {
      const tradeId = generateUniqueId();
      
      await tradesCollection.updateOne(
        { _id: trade._id },
        { $set: { tradeId: tradeId } }
      );
      
      console.log(`‚úÖ ${trade.pair} (${trade._id}) ‚Üí tradeId: ${tradeId}`);
      updated++;
    }
    
    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏—Å–≤–æ–µ–Ω–æ ${updated} tradeId\n`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
  
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
  process.exit(1);
});

