const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Trade = require('../models/Trade');
const User = require('../models/User');
const auth = require('../middleware/auth');

// üìä –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/active', auth, async (req, res) => {
  try {
    const trades = await Trade.find({
      userId: req.user.userId,
      status: 'active'
    }).sort({ entryTime: -1 });

    res.json({
      success: true,
      data: trades
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/history', auth, async (req, res) => {
  try {
    const { limit = 50, skip = 0 } = req.query;

    const trades = await Trade.find({
      userId: req.user.userId,
      status: { $in: ['won', 'lost', 'cancelled'] }
    })
      .sort({ closeTime: -1 })
      .limit(Number(limit))
      .skip(Number(skip));

    const total = await Trade.countDocuments({
      userId: req.user.userId,
      status: { $in: ['won', 'lost', 'cancelled'] }
    });

    res.json({
      success: true,
      data: trades,
      total,
      limit: Number(limit),
      skip: Number(skip)
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É (–æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é)
router.post('/create', auth, async (req, res) => {
  try {
    const {
      pair,
      amount,
      direction, // 'up' –∏–ª–∏ 'down'
      entryPrice,
      expirationSeconds, // –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      payout = 94 // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 94%
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!pair || !amount || !direction || !entryPrice || !expirationSeconds) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã'
      });
    }

    if (amount < 1) {
      return res.status(400).json({
        success: false,
        error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: $1'
      });
    }

    if (!['up', 'down'].includes(direction)) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "up" –∏–ª–∏ "down"'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    if (user.balance < amount) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ'
      });
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
    const entryTime = Date.now();
    const expirationTime = entryTime + (expirationSeconds * 1000);

    // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
    const trade = new Trade({
      userId: user._id,
      pair,
      amount,
      direction,
      payout,
      entryPrice,
      entryTime,
      expirationTime,
      expirationSeconds,
      status: 'active'
    });

    await trade.save();

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.balance -= amount;
    await user.save();

    console.log(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${user.email} | ${pair} | ${direction} | $${amount} | ${expirationSeconds}s`);

    res.json({
      success: true,
      data: trade,
      newBalance: user.balance
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üîí –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
router.post('/close/:tradeId', auth, async (req, res) => {
  try {
    const { tradeId } = req.params;
    const { closePrice } = req.body;

    if (!closePrice) {
      return res.status(400).json({
        success: false,
        error: '–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞'
      });
    }

    const trade = await Trade.findOne({
      _id: tradeId,
      userId: req.user.userId,
      status: 'active'
    });

    if (!trade) {
      return res.status(404).json({
        success: false,
        error: '–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    const closeTime = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ
    if (closeTime < trade.expirationTime) {
      return res.status(400).json({
        success: false,
        error: '–í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let isWin = false;
    if (trade.direction === 'up') {
      isWin = closePrice > trade.entryPrice;
    } else {
      isWin = closePrice < trade.entryPrice;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç
    let profit = 0;
    let status = 'lost';

    if (isWin) {
      // –í—ã–∏–≥—Ä—ã—à: –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É + –¥–æ—Ö–æ–¥
      profit = trade.amount * (trade.payout / 100);
      status = 'won';
    } else {
      // –ü—Ä–æ–∏–≥—Ä—ã—à: —Ç–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
      profit = -trade.amount;
      status = 'lost';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
    trade.closePrice = closePrice;
    trade.closeTime = closeTime;
    trade.status = status;
    trade.profit = profit;
    await trade.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(req.user.userId);
    if (status === 'won') {
      user.balance += trade.amount + profit; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É + –≤—ã–∏–≥—Ä—ã—à
    }
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à - –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
    await user.save();

    console.log(`${status === 'won' ? 'üéâ' : 'üòî'} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞: ${user.email} | ${status.toUpperCase()} | Profit: $${profit.toFixed(2)}`);

    res.json({
      success: true,
      data: trade,
      newBalance: user.balance
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
router.get('/stats', auth, async (req, res) => {
  try {
    const userId = req.user.userId;

    const totalTrades = await Trade.countDocuments({ userId });
    const wonTrades = await Trade.countDocuments({ userId, status: 'won' });
    const lostTrades = await Trade.countDocuments({ userId, status: 'lost' });
    const activeTrades = await Trade.countDocuments({ userId, status: 'active' });

    const totalProfit = await Trade.aggregate([
      { $match: { userId: new mongoose.Types.ObjectId(userId), status: { $in: ['won', 'lost'] } } },
      { $group: { _id: null, total: { $sum: '$profit' } } }
    ]);

    const winRate = totalTrades > 0 ? ((wonTrades / totalTrades) * 100).toFixed(2) : 0;

    res.json({
      success: true,
      data: {
        totalTrades,
        wonTrades,
        lostTrades,
        activeTrades,
        totalProfit: totalProfit.length > 0 ? totalProfit[0].total : 0,
        winRate: Number(winRate)
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;

