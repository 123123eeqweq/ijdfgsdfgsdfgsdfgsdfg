const express = require('express');
const router = express.Router();
const PolygonCandle = require('../models/PolygonCandle');
const { aggregateCandles, isSupportedTimeframe, getGroupSize } = require('../utils/candleAggregator');

// GET /api/polygon-candles - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –∏–∑ –±–∞–∑—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
router.get('/', async (req, res) => {
  try {
    const { 
      pair = 'EUR/USD', 
      limit = 100, 
      timeframe = 5,  // –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –ë–î (–≤—Å–µ–≥–¥–∞ 5 —Å–µ–∫—É–Ω–¥)
      tf = 's5'       // –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (s5, s10, s15, s30, m1, m5, m15)
    } = req.query;
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –∏–∑ –ø–∞—Ä—ã –¥–ª—è MongoDB (EUR/USD ‚Üí EURUSD)
    const cleanPair = pair.replace('/', '');
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π: pair=${pair} ‚Üí ${cleanPair}, limit=${limit}, tf=${tf}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
    if (!isSupportedTimeframe(tf)) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: ${tf}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s5, s10, s15, s30, m1, m5, m15`
      });
    }
    
    const groupSize = getGroupSize(tf);
    const intervalMs = groupSize * 5000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–∫–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ï—Å–ª–∏ tf=s5, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    if (tf === 's5') {
      const closedCandles = await PolygonCandle.find({ 
        pair: cleanPair,
        timeframe: Number(timeframe),
        isClosed: true
      })
        .sort({ startTime: -1 })
        .limit(Number(limit))
        .lean(); // ‚Üê –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º toObject()
      
      const activeCandle = await PolygonCandle.findOne({
        pair: cleanPair,
        timeframe: Number(timeframe),
        isClosed: false
      })
        .sort({ startTime: -1 })
        .lean();
      
      const allCandles = [...closedCandles];
      if (activeCandle) {
        allCandles.push(activeCandle);
      }
      
      const sorted = allCandles.sort((a, b) => a.startTime - b.startTime);
      
      return res.json({
        success: true,
        data: sorted,
        count: sorted.length,
        closedCount: closedCandles.length,
        hasActiveCandle: !!activeCandle,
        pair,
        tf,
        groupSize: 1
      });
    }
    
    // üöÄ –ù–û–í–û–ï: MongoDB Aggregation Pipeline (–í 5-10 –†–ê–ó –ë–´–°–¢–†–ï–ï!)
    const dbLimit = Number(limit) * groupSize;
    
    console.log(`üöÄ [AGGREGATION] –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º ${dbLimit} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ MongoDB pipeline (groupSize=${groupSize})`);
    
    const startTimer = Date.now();
    
    // 1. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ó–ê–ö–†–´–¢–´–ï —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ MongoDB pipeline
    const aggregatedClosed = await PolygonCandle.aggregate([
      // –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–≤–µ—á–∞–º
      { 
        $match: { 
          pair: cleanPair,
          timeframe: Number(timeframe),
          isClosed: true
        }
      },
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ ‚Üí —Å—Ç–∞—Ä—ã–µ)
      { $sort: { startTime: -1 }},
      
      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      { $limit: dbLimit },
      
      // –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ (—Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      { $sort: { startTime: 1 }},
      
      // –í—ã—á–∏—Å–ª—è–µ–º window –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
      {
        $addFields: {
          window: {
            $subtract: [
              '$startTime',
              { $mod: ['$startTime', intervalMs] }
            ]
          }
        }
      },
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ window
      {
        $group: {
          _id: '$window',
          pair: { $first: '$pair' },
          open: { $first: '$open' },           // –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ –≤ –≥—Ä—É–ø–ø–µ
          close: { $last: '$close' },          // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞
          high: { $max: '$high' },             // –ú–∞–∫—Å–∏–º—É–º
          low: { $min: '$low' },               // –ú–∏–Ω–∏–º—É–º
          volume: { $sum: '$volume' },         // –°—É–º–º–∞ –æ–±—ä–µ–º–æ–≤
          startTime: { $min: '$startTime' },   // –ù–∞—á–∞–ª–æ –æ–∫–Ω–∞
          endTime: { $max: '$endTime' },       // –ö–æ–Ω–µ—Ü –æ–∫–Ω–∞
          timeframe: { $first: '$timeframe' }, // –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
          isClosed: { $min: '$isClosed' },     // true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï –∑–∞–∫—Ä—ã—Ç—ã (min –∏–∑ true/false)
          createdAt: { $last: '$createdAt' },  // –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
          updatedAt: { $last: '$updatedAt' },
          lastId: { $last: '$_id' },           // ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
          candleCount: { $sum: 1 }             // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –≥—Ä—É–ø–ø–µ
        }
      },
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ)
      { $sort: { startTime: 1 }},
      
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit —Å–≤–µ—á–µ–π
      { 
        $project: {
          _id: '$lastId',
          pair: 1,
          open: 1,
          close: 1,
          high: 1,
          low: 1,
          volume: 1,
          startTime: 1,
          endTime: 1,
          timeframe: 1,
          isClosed: 1,
          createdAt: 1,
          updatedAt: 1,
          _aggregatedFrom: '$candleCount'
        }
      }
    ]);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–≤–µ—á—É –æ—Ç–¥–µ–ª—å–Ω–æ
    const activeCandle = await PolygonCandle.findOne({
      pair: cleanPair,
      timeframe: Number(timeframe),
      isClosed: false
    })
      .sort({ startTime: -1 })
      .lean();
    
    const aggregationTime = Date.now() - startTimer;
    console.log(`‚ö° [AGGREGATION] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${aggregationTime}ms: ${aggregatedClosed.length} —Å–≤–µ—á–µ–π`);
    
    // üî• –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if (aggregatedClosed.length === 0 && !activeCandle) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—ã ${pair} (${cleanPair}) –≤ –ë–î`);
      return res.json({
        success: true,
        data: [],
        count: 0,
        closedCount: 0,
        hasActiveCandle: false,
        pair,
        tf,
        groupSize,
        warning: `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pair}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ listener —Å–æ–±–µ—Ä–µ—Ç –∏—Å—Ç–æ—Ä–∏—é.`
      });
    }
    
    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–≤–µ—á—É
    let finalCandles = [...aggregatedClosed];
    
    if (activeCandle) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–≤–µ—á–∞ –≤ —Ç–æ –∂–µ –æ–∫–Ω–æ —á—Ç–æ –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è
      const windowStart = Math.floor(activeCandle.startTime / intervalMs) * intervalMs;
      const lastAggregated = aggregatedClosed[aggregatedClosed.length - 1];
      
      if (lastAggregated && lastAggregated.startTime === windowStart) {
        // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–≤–µ—á–∞ –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        lastAggregated.close = activeCandle.close;
        lastAggregated.high = Math.max(lastAggregated.high, activeCandle.high);
        lastAggregated.low = Math.min(lastAggregated.low, activeCandle.low);
        lastAggregated.volume += activeCandle.volume;
        lastAggregated.endTime = activeCandle.endTime;
        lastAggregated.isClosed = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∑–∞–∫—Ä—ã—Ç—É—é
        lastAggregated.updatedAt = activeCandle.updatedAt;
        lastAggregated._aggregatedFrom = (lastAggregated._aggregatedFrom || 0) + 1;
      } else {
        // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–≤–µ—á–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        finalCandles.push({
          _id: activeCandle._id,
          pair: activeCandle.pair,
          open: activeCandle.open,
          close: activeCandle.close,
          high: activeCandle.high,
          low: activeCandle.low,
          volume: activeCandle.volume,
          startTime: activeCandle.startTime,
          endTime: activeCandle.endTime,
          timeframe: activeCandle.timeframe,
          isClosed: false,
          createdAt: activeCandle.createdAt,
          updatedAt: activeCandle.updatedAt,
          _aggregatedFrom: 1
        });
      }
    }
    
    // 4. –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ limit (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
    const limitedCandles = finalCandles.slice(-Number(limit));
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${limitedCandles.length} —Å–≤–µ—á–µ–π (–∑–∞–∫—Ä—ã—Ç—ã—Ö: ${limitedCandles.filter(c => c.isClosed).length})`);
    
    res.json({
      success: true,
      data: limitedCandles,
      count: limitedCandles.length,
      closedCount: limitedCandles.filter(c => c.isClosed).length,
      hasActiveCandle: limitedCandles.some(c => !c.isClosed),
      pair,
      tf,
      groupSize,
      aggregationTimeMs: aggregationTime // üî• –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;

