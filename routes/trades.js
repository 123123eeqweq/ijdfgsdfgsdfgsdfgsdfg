/**
 * üîí –ë–ï–ó–û–ü–ê–°–ù–´–ï —Ä–æ—É—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
 * 
 * –ü–†–ò–ù–¶–ò–ü–´:
 * 1. Backend –°–ê–ú –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç entryPrice (–∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ–ª–∞—Ç—å)
 * 2. Backend –°–ê–ú –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ worker (–∫–ª–∏–µ–Ω—Ç –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç closePrice)
 * 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
 * 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * 5. Rate limiting
 */

const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Trade = require('../models/Trade');
const User = require('../models/User');
const auth = require('../middleware/auth');
const PriceService = require('../services/PriceService');

// üî• Rate Limiting - –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ (—Å–º—è–≥—á–µ–Ω–Ω—ã–π –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
let createTradeLimit;
try {
  const rateLimit = require('express-rate-limit');
  createTradeLimit = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    max: 100, // –ú–∞–∫—Å–∏–º—É–º 100 —Å–¥–µ–ª–æ–∫ –≤ –º–∏–Ω—É—Ç—É (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
    message: {
      success: false,
      error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
    },
    standardHeaders: true,
    legacyHeaders: false,
  });
} catch (err) {
  console.warn('‚ö†Ô∏è express-rate-limit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, rate limiting –æ—Ç–∫–ª—é—á–µ–Ω');
  // Fallback - –ø—É—Å—Ç–æ–π middleware
  createTradeLimit = (req, res, next) => next();
}

// üìä –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/active', auth, async (req, res) => {
  try {
    const trades = await Trade.find({
      userId: req.user.userId,
      status: 'active'
    }).sort({ entryTime: -1 });

    res.json({
      success: true,
      data: trades
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/history', auth, async (req, res) => {
  try {
    // üöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: skip –∏ offset
    const { limit = 50, skip = 0, offset } = req.query;
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined, –∞ –Ω–µ –Ω–∞ falsy
    const skipValue = offset !== undefined ? Number(offset) : Number(skip);

    const trades = await Trade.find({
      userId: req.user.userId,
      status: { $in: ['won', 'lost', 'cancelled'] }
    })
      .sort({ closeTime: -1 })
      .limit(Number(limit))
      .skip(skipValue);

    const total = await Trade.countDocuments({
      userId: req.user.userId,
      status: { $in: ['won', 'lost', 'cancelled'] }
    });

    res.json({
      success: true,
      data: trades,
      total,
      limit: Number(limit),
      skip: skipValue,
      offset: skipValue // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üöÄ –ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
router.post('/create', auth, createTradeLimit, async (req, res) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const {
      pair,
      amount,
      direction, // 'up' –∏–ª–∏ 'down'
      expirationSeconds, // –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      payout = 94, // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 94%
      accountType = 'demo' // –¢–∏–ø —Å—á–µ—Ç–∞: 'demo' –∏–ª–∏ 'real'
    } = req.body;

    // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:', {
      pair,
      amount,
      direction,
      expirationSeconds,
      payout,
      accountType,
      user: req.user?.email || req.user?.userId
    });

    // ============================================
    // üî• –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    // ============================================
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!pair || !amount || !direction || !expirationSeconds) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã', { pair, amount, direction, expirationSeconds });
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã',
        details: {
          pair: !!pair,
          amount: !!amount,
          direction: !!direction,
          expirationSeconds: !!expirationSeconds
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å—á–µ—Ç–∞
    if (!['demo', 'real'].includes(accountType)) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—á–µ—Ç–∞', accountType);
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: '–¢–∏–ø —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "demo" –∏–ª–∏ "real"',
        details: { accountType }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã:', pair);
    const isPairValid = await PriceService.isPairValid(pair);
    if (!isPairValid) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–∞—Ä–∞', pair);
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: ${pair}`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã:', amount, typeof amount);
    if (typeof amount !== 'number' || amount < 1 || amount > 900000) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞', { amount, type: typeof amount });
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç $1 –¥–æ $900,000',
        details: { amount, type: typeof amount }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', direction);
    if (!['up', 'down'].includes(direction)) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', direction);
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "up" –∏–ª–∏ "down"',
        details: { direction }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏:', expirationSeconds, typeof expirationSeconds);
    if (typeof expirationSeconds !== 'number' || expirationSeconds < 5 || expirationSeconds > 3600) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏', { expirationSeconds, type: typeof expirationSeconds });
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: '–í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 1 —á–∞—Å–∞',
        details: { expirationSeconds, type: typeof expirationSeconds }
      });
    }

    // ============================================
    // üî• –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –¶–ï–ù–£ –í–•–û–î–ê (BACKEND!)
    // ============================================
    
    const priceData = await PriceService.getCurrentPrice(pair);
    const entryPrice = priceData.price;
    const entryTime = Date.now();

    console.log(`üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${pair}: ${entryPrice} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${priceData.source}, –≤–æ–∑—Ä–∞—Å—Ç: ${priceData.age}ms)`);

    // ============================================
    // üî• –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ò –°–ü–ò–°–ê–ù–ò–ï
    // ============================================
    
    const user = await User.findById(req.user.userId).session(session);
    if (!user) {
      await session.abortTransaction();
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ–º
    const balanceField = accountType === 'demo' ? 'demoBalance' : 'realBalance';
    const currentBalance = user[balanceField];

    if (currentBalance < amount) {
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ ${accountType === 'demo' ? '–¥–µ–º–æ' : '—Ä–µ–∞–ª—å–Ω–æ–º'} —Å—á–µ—Ç–µ. –ë–∞–ª–∞–Ω—Å: $${currentBalance.toFixed(2)}`
      });
    }

    // üî• –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    const newBalance = currentBalance - amount;
    if (newBalance < 0) {
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É'
      });
    }

    // ============================================
    // üî• –°–û–ó–î–ê–ù–ò–ï –°–î–ï–õ–ö–ò
    // ============================================
    
    const expirationTime = entryTime + (expirationSeconds * 1000);

    const trade = new Trade({
      userId: user._id,
      pair,
      amount,
      direction,
      payout,
      accountType, // üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å—á–µ—Ç–∞
      entryPrice, // üî• BACKEND –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ü–µ–Ω—É!
      entryTime,
      expirationTime,
      expirationSeconds,
      status: 'active'
    });

    await trade.save({ session });

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    user[balanceField] = newBalance;
    await user.save({ session });

    // ============================================
    // üî• COMMIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    // ============================================
    
    await session.commitTransaction();

    console.log(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${user.email} | ${accountType.toUpperCase()} | ${pair} | ${direction} | $${amount} | ${expirationSeconds}s | Entry: ${entryPrice}`);

    res.json({
      success: true,
      data: trade,
      demoBalance: user.demoBalance,
      realBalance: user.realBalance
    });

  } catch (error) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
    await session.abortTransaction();
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
    
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  } finally {
    session.endSession();
  }
});

// ‚ùå –£–î–ê–õ–Ø–ï–ú —Ä–æ—É—Ç /close - —Ç–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —á–µ—Ä–µ–∑ worker!

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
router.get('/stats', auth, async (req, res) => {
  try {
    const userId = req.user.userId;

    const totalTrades = await Trade.countDocuments({ userId });
    const wonTrades = await Trade.countDocuments({ userId, status: 'won' });
    const lostTrades = await Trade.countDocuments({ userId, status: 'lost' });
    const activeTrades = await Trade.countDocuments({ userId, status: 'active' });

    const totalProfit = await Trade.aggregate([
      { $match: { userId: new mongoose.Types.ObjectId(userId), status: { $in: ['won', 'lost'] } } },
      { $group: { _id: null, total: { $sum: '$profit' } } }
    ]);

    const winRate = totalTrades > 0 ? ((wonTrades / totalTrades) * 100).toFixed(2) : 0;

    res.json({
      success: true,
      data: {
        totalTrades,
        wonTrades,
        lostTrades,
        activeTrades,
        totalProfit: totalProfit.length > 0 ? totalProfit[0].total : 0,
        winRate: Number(winRate)
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;

