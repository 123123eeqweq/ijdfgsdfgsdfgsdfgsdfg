const WebSocket = require('ws');
const dotenv = require('dotenv');

dotenv.config();

const POLYGON_KEY = process.env.POLYGON_API_KEY || 'OCt3_VBXxYIKWKSRWNaJk_yquKzcW5UC';
const POLYGON_WS_URL = 'wss://socket.polygon.io/crypto';
const WS_PORT = process.env.QUOTES_PORT || 8081; // –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∫—Ä–∏–ø—Ç—ã

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ!)
let polygonWs = null;
let isPolygonConnected = false;

// –°–æ–∑–¥–∞—ë–º –Ω–∞—à WebSocket —Å–µ—Ä–≤–µ—Ä (—Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä)
const wss = new WebSocket.Server({ port: WS_PORT });

// üè† ROOM-BASED –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
const clients = new Set();
const rooms = new Map(); // Map<pairName, Set<client>>
const clientRooms = new Map(); // Map<client, Set<pairName>>

console.log(`üî∑ Polygon CRYPTO Relay –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${WS_PORT} (Room-based)`);
console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon Crypto...`);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Polygon (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ!)
function connectToPolygon() {
  polygonWs = new WebSocket(POLYGON_WS_URL);

  polygonWs.on('open', () => {
    console.log('‚úÖ Polygon CRYPTO WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    isPolygonConnected = true;

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    polygonWs.send(JSON.stringify({
      action: 'auth',
      params: POLYGON_KEY
    }));
  });

  polygonWs.on('message', (data) => {
    try {
      const parsed = JSON.parse(data.toString());
      const messages = Array.isArray(parsed) ? parsed : [parsed];

      messages.forEach((msg) => {
        // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if (msg.ev === 'status' && msg.status === 'auth_success') {
          console.log('üîê Polygon CRYPTO –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
          
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ 10 Crypto –ø–∞—Ä
          polygonWs.send(JSON.stringify({
            action: 'subscribe',
            params: 'XAS.BTC-USD,XAS.ETH-USD,XAS.LTC-USD,XAS.XRP-USD,XAS.SOL-USD,XAS.ADA-USD,XAS.DOT-USD,XAS.MATIC-USD,XAS.AVAX-USD,XAS.LINK-USD'
          }));
          
          console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 10 Crypto –ø–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: BTC-USD, ETH-USD, LTC-USD, XRP-USD, SOL-USD, ADA-USD, DOT-USD, MATIC-USD, AVAX-USD, LINK-USD\n');
        }

        // –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Polygon –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        broadcastToClients(msg);
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err.message);
    }
  });

  polygonWs.on('error', (err) => {
    console.error('Polygon –æ—à–∏–±–∫–∞:', err.message);
  });

  polygonWs.on('close', (code) => {
    console.log(`üî¥ Polygon –∑–∞–∫—Ä—ã—Ç (${code}). –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
    isPolygonConnected = false;
    setTimeout(connectToPolygon, 3000);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon
connectToPolygon();

// üè† –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ù–ê–¢–ê–ú–ò
function subscribeClientToPair(client, pair) {
  if (!rooms.has(pair)) {
    rooms.set(pair, new Set());
  }
  rooms.get(pair).add(client);
  
  if (!clientRooms.has(client)) {
    clientRooms.set(client, new Set());
  }
  clientRooms.get(client).add(pair);
  
  console.log(`üìå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ ${pair}. –í –∫–æ–º–Ω–∞—Ç–µ: ${rooms.get(pair).size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
}

function unsubscribeClientFromPair(client, pair) {
  if (rooms.has(pair)) {
    rooms.get(pair).delete(client);
    if (rooms.get(pair).size === 0) {
      rooms.delete(pair);
    }
  }
  
  if (clientRooms.has(client)) {
    clientRooms.get(client).delete(pair);
  }
  
  console.log(`üìç –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç ${pair}`);
}

function unsubscribeClientFromAll(client) {
  const pairs = clientRooms.get(client) || new Set();
  pairs.forEach(pair => {
    if (rooms.has(pair)) {
      rooms.get(pair).delete(client);
      if (rooms.get(pair).size === 0) {
        rooms.delete(pair);
      }
    }
  });
  
  clientRooms.delete(client);
}

// –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
wss.on('connection', (ws) => {
  console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size + 1}`);
  clients.add(ws);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Polygon
  ws.send(JSON.stringify({
    ev: 'status',
    status: isPolygonConnected ? 'relay_ready' : 'relay_connecting',
    message: isPolygonConnected ? 'Crypto Relay –≥–æ—Ç–æ–≤' : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon Crypto...'
  }));
  
  // üè† –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ö–õ–ò–ï–ù–¢–ê
  ws.on('message', (data) => {
    try {
      const msg = JSON.parse(data.toString());
      
      if (msg.action === 'subscribe' && msg.pair) {
        subscribeClientToPair(ws, msg.pair);
        ws.send(JSON.stringify({ ev: 'status', message: `Subscribed to ${msg.pair}` }));
      } else if (msg.action === 'unsubscribe' && msg.pair) {
        unsubscribeClientFromPair(ws, msg.pair);
        ws.send(JSON.stringify({ ev: 'status', message: `Unsubscribed from ${msg.pair}` }));
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', err.message);
    }
  });

  ws.on('close', () => {
    unsubscribeClientFromAll(ws);
    clients.delete(ws);
    console.log(`üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
  });

  ws.on('error', (err) => {
    console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', err.message);
  });
});

// üè† ROOM-BASED: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
function broadcastToClients(message) {
  const pair = message.pair; // Crypto –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'pair' (–Ω–µ 'p')
  
  if (!pair) {
    const data = JSON.stringify(message);
    clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(data);
      }
    });
    return;
  }
  
  const subscribedClients = rooms.get(pair);
  
  if (!subscribedClients || subscribedClients.size === 0) {
    return;
  }
  
  const data = JSON.stringify(message);
  subscribedClients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(data);
    }
  });
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Polygon CRYPTO Relay...');
  console.log(`üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  clients.forEach(client => client.close());
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
  wss.close();
  
  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Polygon
  if (polygonWs) {
    polygonWs.close();
  }
  
  process.exit(0);
});

console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ CRYPTO');
console.log(`üåê –ö–ª–∏–µ–Ω—Ç—ã: ws://localhost:${WS_PORT}\n`);

