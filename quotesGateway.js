/**
 * üåê Quotes Gateway Server
 * 
 * –ï–¥–∏–Ω—ã–π WebSocket gateway –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
 * –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º relay —Å–µ—Ä–≤–µ—Ä–∞–º.
 * 
 * ROUTES:
 * - /forex  ‚Üí ws://localhost:8080 (Polygon Forex Relay)
 * - /crypto ‚Üí ws://localhost:8081 (Polygon Crypto Relay)
 * - /otc    ‚Üí ws://localhost:8082 (OTC Relay)
 * 
 * DEPLOYMENT:
 * - –õ–æ–∫–∞–ª—å–Ω–æ: ws://localhost:9000/forex
 * - Render: wss://your-app.onrender.com/forex
 */

const WebSocket = require('ws');
const http = require('http');
const url = require('url');
const dotenv = require('dotenv');

dotenv.config();

// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (Render) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PORT, –ª–æ–∫–∞–ª—å–Ω–æ - QUOTES_GATEWAY_PORT
// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: QUOTES_GATEWAY_PORT (–ª–æ–∫–∞–ª—å–Ω–æ) ‚Üí PORT (Render) ‚Üí 9000 (–¥–µ—Ñ–æ–ª—Ç)
const PORT = process.env.QUOTES_GATEWAY_PORT || process.env.PORT || 9000;

// üì° –ê–¥—Ä–µ—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö relay —Å–µ—Ä–≤–µ—Ä–æ–≤ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const FOREX_RELAY = process.env.FOREX_RELAY_URL || 'ws://localhost:8080';
const CRYPTO_RELAY = process.env.CRYPTO_RELAY_URL || 'ws://localhost:8081';
const OTC_RELAY = process.env.OTC_RELAY_URL || 'ws://localhost:8082';

console.log('üåê Quotes Gateway Server');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// –°–æ–∑–¥–∞—ë–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  // Health check endpoint
  if (req.url === '/health' || req.url === '/') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'ok',
      service: 'Quotes Gateway',
      routes: {
        forex: '/forex',
        crypto: '/crypto',
        otc: '/otc'
      },
      uptime: process.uptime(),
      timestamp: new Date().toISOString()
    }));
  } else {
    res.writeHead(404);
    res.end('Not Found');
  }
});

// –°–æ–∑–¥–∞—ë–º WebSocket —Å–µ—Ä–≤–µ—Ä—ã (–±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞)
const wssForex = new WebSocket.Server({ noServer: true });
const wssCrypto = new WebSocket.Server({ noServer: true });
const wssOTC = new WebSocket.Server({ noServer: true });

// –°—á—ë—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
let stats = {
  forex: 0,
  crypto: 0,
  otc: 0
};

/**
 * üî• –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–∫—Å–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ relay —Å–µ—Ä–≤–µ—Ä–æ–º
 */
function createProxyConnection(clientWs, relayUrl, source) {
  console.log(`üì° –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${source.toUpperCase()} relay`);
  stats[source]++;
  
  let relayWs = null;
  let isRelayConnected = false;
  let messageBuffer = []; // –ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ relay
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ relay —Å–µ—Ä–≤–µ—Ä—É
  function connectToRelay() {
    relayWs = new WebSocket(relayUrl);
    
    relayWs.on('open', () => {
      console.log(`‚úÖ ${source.toUpperCase()} relay –ø–æ–¥–∫–ª—é—á–µ–Ω`);
      isRelayConnected = true;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      while (messageBuffer.length > 0 && relayWs.readyState === WebSocket.OPEN) {
        const msg = messageBuffer.shift();
        relayWs.send(msg);
      }
    });
    
    // –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç relay ‚Üí –∫–ª–∏–µ–Ω—Ç—É
    relayWs.on('message', (data) => {
      if (clientWs.readyState === WebSocket.OPEN) {
        clientWs.send(data);
      }
    });
    
    relayWs.on('error', (err) => {
      console.error(`‚ùå ${source.toUpperCase()} relay –æ—à–∏–±–∫–∞:`, err.message);
    });
    
    relayWs.on('close', () => {
      console.log(`üî¥ ${source.toUpperCase()} relay –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
      isRelayConnected = false;
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (clientWs.readyState === WebSocket.OPEN) {
          connectToRelay();
        }
      }, 3000);
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ relay
  connectToRelay();
  
  // –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí relay
  clientWs.on('message', (data) => {
    if (relayWs && relayWs.readyState === WebSocket.OPEN) {
      relayWs.send(data);
    } else {
      // –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º –µ—Å–ª–∏ relay –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      messageBuffer.push(data);
    }
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  clientWs.on('close', () => {
    console.log(`üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç ${source.toUpperCase()}`);
    stats[source]--;
    
    if (relayWs) {
      relayWs.close();
    }
  });
  
  clientWs.on('error', (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${source.toUpperCase()}:`, err.message);
  });
}

// ============================================
// üî• –†–û–£–¢–ò–ù–ì WebSocket –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
// ============================================

server.on('upgrade', (request, socket, head) => {
  const pathname = url.parse(request.url).pathname;
  
  console.log(`üîå WebSocket upgrade –∑–∞–ø—Ä–æ—Å: ${pathname}`);
  
  // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –ø—É—Ç–∏
  if (pathname === '/forex') {
    wssForex.handleUpgrade(request, socket, head, (ws) => {
      wssForex.emit('connection', ws, request);
    });
  } else if (pathname === '/crypto') {
    wssCrypto.handleUpgrade(request, socket, head, (ws) => {
      wssCrypto.emit('connection', ws, request);
    });
  } else if (pathname === '/otc') {
    wssOTC.handleUpgrade(request, socket, head, (ws) => {
      wssOTC.emit('connection', ws, request);
    });
  } else {
    console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å: ${pathname}`);
    socket.write('HTTP/1.1 404 Not Found\r\n\r\n');
    socket.destroy();
  }
});

// ============================================
// üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
// ============================================

wssForex.on('connection', (ws, request) => {
  createProxyConnection(ws, FOREX_RELAY, 'forex');
});

wssCrypto.on('connection', (ws, request) => {
  createProxyConnection(ws, CRYPTO_RELAY, 'crypto');
});

wssOTC.on('connection', (ws, request) => {
  createProxyConnection(ws, OTC_RELAY, 'otc');
});

// ============================================
// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ============================================

server.listen(PORT, () => {
  console.log(`‚úÖ Gateway –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('');
  console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
  console.log(`   ‚Ä¢ ws://localhost:${PORT}/forex  ‚Üí ${FOREX_RELAY}`);
  console.log(`   ‚Ä¢ ws://localhost:${PORT}/crypto ‚Üí ${CRYPTO_RELAY}`);
  console.log(`   ‚Ä¢ ws://localhost:${PORT}/otc    ‚Üí ${OTC_RELAY}`);
  console.log('');
  console.log(`üîç Health check: http://localhost:${PORT}/health`);
  console.log('');
  console.log('‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ relay —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã (npm run quotes)');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
});

// ============================================
// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
// ============================================

setInterval(() => {
  const total = stats.forex + stats.crypto + stats.otc;
  if (total > 0) {
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: Forex: ${stats.forex} | Crypto: ${stats.crypto} | OTC: ${stats.otc} | –í—Å–µ–≥–æ: ${total}`);
  }
}, 30000);

// ============================================
// üõë GRACEFUL SHUTDOWN
// ============================================

process.on('SIGINT', () => {
  console.log('\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Quotes Gateway...');
  console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${stats.forex + stats.crypto + stats.otc}`);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–µ—Ä–≤–µ—Ä—ã
  wssForex.close();
  wssCrypto.close();
  wssOTC.close();
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  server.close(() => {
    console.log('‚úÖ Gateway –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
  
  // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log('‚ö†Ô∏è  –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    process.exit(1);
  }, 5000);
});

