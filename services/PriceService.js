/**
 * üéØ PriceService - –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–´–• —Ü–µ–Ω
 * 
 * –í–ê–ñ–ù–û: Backend –°–ê–ú –ø–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã, –∫–ª–∏–µ–Ω—Ç –ù–ï –º–æ–∂–µ—Ç –∏—Ö –ø–æ–¥–¥–µ–ª–∞—Ç—å!
 * 
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: In-memory –∫—ç—à —Ü–µ–Ω –∏–∑ WebSocket (~0ms –≤–º–µ—Å—Ç–æ ~50ms –∏–∑ MongoDB)
 */

const PolygonCandle = require('../models/PolygonCandle');
const PolygonCryptoCandle = require('../models/PolygonCryptoCandle');
const OtcCandle = require('../models/OtcCandle');
const WebSocket = require('ws');

class PriceService {
  constructor() {
    // üöÄ –ù–û–í–û–ï: In-memory –∫—ç—à —Ü–µ–Ω
    this.priceCache = new Map(); // pair -> {price, timestamp, source}
    
    // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.wsConnections = {
      otc: null,
      polygon: null,
      polygonCrypto: null
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.initializeWebSockets();
  }

  /**
   * üöÄ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è real-time —Ü–µ–Ω
   */
  initializeWebSockets() {
    // WebSocket URLs –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è Railway) –∏–ª–∏ localhost (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    const QUOTES_WS_URL = process.env.QUOTES_WS_URL || 'ws://localhost:8080';
    
    console.log('üîå PriceService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
    console.log(`   üì° Quotes WebSocket: ${QUOTES_WS_URL}`);
    
    // OTC WebSocket - –≤—Å–µ –∏–¥—É—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω Quotes —Å–µ—Ä–≤–∏—Å
    this.connectToWebSocket('otc', QUOTES_WS_URL, (message) => {
      if (message.ev === 'OTC' && message.pair && message.c) {
        // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–∫ "EUR/USD OTC"
        const cacheKey = `${message.pair} OTC`;
        this.priceCache.set(cacheKey, {
          price: message.c,
          timestamp: message.s || Date.now(),
          source: 'OTC WebSocket'
        });
      }
    });

    // Polygon Forex WebSocket - –≤—Å–µ –∏–¥—É—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω Quotes —Å–µ—Ä–≤–∏—Å
    this.connectToWebSocket('polygon', QUOTES_WS_URL, (message) => {
      if (message.ev === 'CAS' && message.pair && message.c) {
        // Polygon –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ "EURUSD" ‚Üí –∫—ç—à–∏—Ä—É–µ–º –∫–∞–∫ "EUR/USD"
        const formattedPair = this.formatPolygonPair(message.pair);
        this.priceCache.set(formattedPair, {
          price: message.c,
          timestamp: message.s || Date.now(),
          source: 'Polygon Forex WebSocket'
        });
      }
    });

    // Polygon Crypto WebSocket - –≤—Å–µ –∏–¥—É—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω Quotes —Å–µ—Ä–≤–∏—Å
    this.connectToWebSocket('polygonCrypto', QUOTES_WS_URL, (message) => {
      if (message.ev === 'XAS' && message.pair && message.c) {
        // Crypto –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ "BTC-USD" ‚Üí –∫—ç—à–∏—Ä—É–µ–º –∫–∞–∫ "BTC/USD"
        const formattedPair = message.pair.replace('-', '/');
        this.priceCache.set(formattedPair, {
          price: message.c,
          timestamp: message.s || Date.now(),
          source: 'Polygon Crypto WebSocket'
        });
      }
    });
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å auto-reconnect
   */
  connectToWebSocket(name, url, onMessage) {
    const connect = () => {
      try {
        const ws = new WebSocket(url);
        
        ws.on('open', () => {
          console.log(`‚úÖ PriceService: ${name} WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω (${url})`);
          this.wsConnections[name] = ws;
        });

        ws.on('message', (data) => {
          try {
            const message = JSON.parse(data.toString());
            onMessage(message);
          } catch (err) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
          }
        });

        ws.on('error', (err) => {
          console.warn(`‚ö†Ô∏è PriceService: ${name} WebSocket –æ—à–∏–±–∫–∞:`, err.message);
        });

        ws.on('close', () => {
          console.warn(`üî¥ PriceService: ${name} WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...`);
          this.wsConnections[name] = null;
          
          // Auto-reconnect —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
          setTimeout(() => connect(), 5000);
        });
      } catch (err) {
        console.error(`‚ùå PriceService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${name}:`, err.message);
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => connect(), 10000);
      }
    };

    connect();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –∏–∑ Polygon (EURUSD ‚Üí EUR/USD)
   */
  formatPolygonPair(pair) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ 3 —Å–∏–º–≤–æ–ª–∞
    if (pair.length === 6) {
      return `${pair.slice(0, 3)}/${pair.slice(3)}`;
    }
    return pair;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–∞—Ä—ã
   * @param {string} pair - –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "EUR/USD", "BTC/USD", "EUR/USD OTC")
   * @returns {Promise<{price: number, timestamp: number, source: string}>}
   */
  async getCurrentPrice(pair) {
    try {
      // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º in-memory –∫—ç—à
      const cached = this.priceCache.get(pair);
      if (cached) {
        const age = Date.now() - cached.timestamp;
        const MAX_CACHE_AGE = 1 * 1000; // üî• –£–ú–ï–ù–¨–®–ï–ù–û: 1 —Å–µ–∫—É–Ω–¥–∞ (–±—ã–ª–æ 10) –¥–ª—è –°–í–ï–ñ–ò–• —Ü–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–æ–∫
        
        if (age < MAX_CACHE_AGE) {
          // –ö—ç—à —Å–≤–µ–∂–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ú–ì–ù–û–í–ï–ù–ù–û! (~0ms)
          return {
            price: cached.price,
            timestamp: cached.timestamp,
            source: cached.source + ' (cached)',
            age
          };
        } else {
          console.warn(`‚ö†Ô∏è –ö—ç—à –¥–ª—è ${pair} —É—Å—Ç–∞—Ä–µ–ª (${Math.round(age / 1000)}s), –∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB...`);
        }
      }

      // üî• FALLBACK: –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ MongoDB
      // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WS)
      let candle;
      let source;

      if (pair.includes('OTC')) {
        // OTC –ø–∞—Ä—ã
        // ‚ö†Ô∏è –í–ê–ñ–ù–û: –í OTC –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è "EUR/USD" (—Å–æ —Å–ª—ç—à–µ–º!), —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ " OTC"
        const cleanPair = pair.replace(' OTC', '');
        candle = await OtcCandle.findOne({ pair: cleanPair })
          .sort({ startTime: -1 }) // OTC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç startTime, –Ω–µ timestamp!
          .limit(1);
        source = 'OTC';
      } else if (pair.includes('BTC') || pair.includes('ETH') || pair.includes('LTC') || 
                 pair.includes('XRP') || pair.includes('ADA') || pair.includes('SOL') ||
                 pair.includes('DOT') || pair.includes('MATIC') || pair.includes('AVAX') || pair.includes('LINK')) {
        // –ö—Ä–∏–ø—Ç–æ –ø–∞—Ä—ã
        const cleanPair = pair.replace('/', '-');
        candle = await PolygonCryptoCandle.findOne({ pair: cleanPair })
          .sort({ startTime: -1 })
          .limit(1);
        source = 'Polygon Crypto';
      } else {
        // Forex –ø–∞—Ä—ã
        const cleanPair = pair.replace('/', '');
        candle = await PolygonCandle.findOne({ pair: cleanPair })
          .sort({ startTime: -1 }) // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º startTime –≤–º–µ—Å—Ç–æ timestamp
          .limit(1);
        source = 'Polygon Forex';
      }

      if (!candle) {
        const hint = pair.includes('OTC') 
          ? '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ OTC listener –∑–∞–ø—É—â–µ–Ω: npm run otc' 
          : pair.includes('BTC') || pair.includes('ETH') || pair.includes('LTC') || 
            pair.includes('XRP') || pair.includes('ADA') || pair.includes('SOL') ||
            pair.includes('DOT') || pair.includes('MATIC') || pair.includes('AVAX') || pair.includes('LINK')
            ? '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Polygon Crypto listener –∑–∞–ø—É—â–µ–Ω: npm run polygon-crypto'
            : '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Polygon listener –∑–∞–ø—É—â–µ–Ω: npm run polygon';
        throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—ã ${pair}. ${hint}`);
      }

      // üî• –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
      const now = Date.now();
      // OTC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç startTime, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - timestamp
      const candleTimestamp = candle.startTime || candle.timestamp;
      const candleAge = now - candleTimestamp;
      const MAX_AGE = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞

      if (candleAge > MAX_AGE) {
        console.warn(`‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${pair}: ${Math.round(candleAge / 1000)}s –Ω–∞–∑–∞–¥`);
        // –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        // throw new Error(`–î–∞–Ω–Ω—ã–µ –¥–ª—è ${pair} —É—Å—Ç–∞—Ä–µ–ª–∏ (${Math.round(candleAge / 1000)}s –Ω–∞–∑–∞–¥)`);
      }

      // üî• –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
      if (!candle.close || typeof candle.close !== 'number' || !isFinite(candle.close) || candle.close <= 0) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è ${pair}: ${candle.close}`);
      }

      // üöÄ –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ MongoDB
      this.priceCache.set(pair, {
        price: candle.close,
        timestamp: candleTimestamp,
        source: source + ' (MongoDB)'
      });

      return {
        price: candle.close,
        timestamp: candleTimestamp,
        source,
        age: candleAge
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${pair}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏)
   * @param {string} pair - –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
   * @param {number} timestamp - Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @param {number} toleranceMs - –î–æ–ø—É—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥)
   * @returns {Promise<{price: number, timestamp: number, source: string}>}
   */
  async getPriceAtTime(pair, timestamp, toleranceMs = 5000) {
    try {
      // üî• –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å timestamp
      const now = Date.now();
      const ONE_YEAR = 365 * 24 * 60 * 60 * 1000;
      
      if (timestamp > now + ONE_YEAR) {
        console.warn(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π timestamp –¥–ª—è ${pair}: ${timestamp} (${new Date(timestamp).toISOString()}), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è`);
        timestamp = now;
      }
      
      if (timestamp < now - 30 * 24 * 60 * 60 * 1000) { // –°—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        console.warn(`‚ö†Ô∏è –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π timestamp –¥–ª—è ${pair}: ${timestamp} (${new Date(timestamp).toISOString()})`);
      }

      let candle;
      let source;

      if (pair.includes('OTC')) {
        // ‚ö†Ô∏è –í–ê–ñ–ù–û: –í OTC –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è "EUR/USD" (—Å–æ —Å–ª—ç—à–µ–º!), —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ " OTC"
        const cleanPair = pair.replace(' OTC', '');
        // –ò—â–µ–º —Å–≤–µ—á—É, –±–ª–∏–∂–∞–π—à—É—é –∫ timestamp (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö toleranceMs)
        // OTC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç startTime, –Ω–µ timestamp!
        candle = await OtcCandle.findOne({
          pair: cleanPair,
          startTime: {
            $gte: timestamp - toleranceMs,
            $lte: timestamp + toleranceMs
          }
        })
          .sort({ startTime: -1 })
          .limit(1);
        source = 'OTC';
        
        // üöÄ FALLBACK: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –¥–æ–ø—É—Å–∫–µ, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        if (!candle) {
          console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pair} –≤ –¥–æ–ø—É—Å–∫–µ ¬±${toleranceMs}ms, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É...`);
          candle = await OtcCandle.findOne({ pair: cleanPair })
            .sort({ startTime: -1 })
            .limit(1);
          source = 'OTC (fallback - –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è)';
        }
      } else if (pair.includes('BTC') || pair.includes('ETH') || pair.includes('LTC') || 
                 pair.includes('XRP') || pair.includes('ADA') || pair.includes('SOL') ||
                 pair.includes('DOT') || pair.includes('MATIC') || pair.includes('AVAX') || pair.includes('LINK')) {
        const cleanPair = pair.replace('/', '-');
        candle = await PolygonCryptoCandle.findOne({
          pair: cleanPair,
          startTime: {
            $gte: timestamp - toleranceMs,
            $lte: timestamp + toleranceMs
          }
        })
          .sort({ startTime: -1 })
          .limit(1);
        source = 'Polygon Crypto';
        
        // üöÄ FALLBACK
        if (!candle) {
          console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pair} –≤ –¥–æ–ø—É—Å–∫–µ ¬±${toleranceMs}ms, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É...`);
          candle = await PolygonCryptoCandle.findOne({ pair: cleanPair })
            .sort({ startTime: -1 })
            .limit(1);
          source = 'Polygon Crypto (fallback - –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è)';
        }
      } else {
        const cleanPair = pair.replace('/', '');
        candle = await PolygonCandle.findOne({
          pair: cleanPair,
          startTime: { // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º startTime –≤–º–µ—Å—Ç–æ timestamp
            $gte: timestamp - toleranceMs,
            $lte: timestamp + toleranceMs
          }
        })
          .sort({ startTime: -1 }) // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º startTime –≤–º–µ—Å—Ç–æ timestamp
          .limit(1);
        source = 'Polygon Forex';
        
        // üöÄ FALLBACK
        if (!candle) {
          console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pair} –≤ –¥–æ–ø—É—Å–∫–µ ¬±${toleranceMs}ms, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É...`);
          candle = await PolygonCandle.findOne({ pair: cleanPair })
            .sort({ startTime: -1 }) // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º startTime –≤–º–µ—Å—Ç–æ timestamp
            .limit(1);
          source = 'Polygon Forex (fallback - –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è)';
        }
      }

      if (!candle) {
        // üöÄ –ö–†–ê–ô–ù–ò–ô FALLBACK: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        console.warn(`‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pair}, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É...`);
        try {
          const currentPrice = await this.getCurrentPrice(pair);
          return {
            price: currentPrice.price,
            timestamp: currentPrice.timestamp,
            source: currentPrice.source + ' (fallback - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞)',
            timeDiff: Math.abs(currentPrice.timestamp - timestamp),
            warning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤–º–µ—Å—Ç–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π'
          };
        } catch (fallbackError) {
          throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${pair} –Ω–∞ –º–æ–º–µ–Ω—Ç ${new Date(timestamp).toISOString()} –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É`);
        }
      }

      // üî• –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
      if (!candle.close || typeof candle.close !== 'number' || !isFinite(candle.close) || candle.close <= 0) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è ${pair} –Ω–∞ –º–æ–º–µ–Ω—Ç ${timestamp}: ${candle.close}`);
      }

      // OTC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç startTime, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - timestamp
      const candleTimestamp = candle.startTime || candle.timestamp;
      const timeDiff = Math.abs(candleTimestamp - timestamp);
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–∞—è
      if (timeDiff > toleranceMs) {
        console.warn(`‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ${pair}: ${Math.round(timeDiff / 1000)}s (–¥–æ–ø—É—Å–∫: ${toleranceMs / 1000}s)`);
      }

      return {
        price: candle.close,
        timestamp: candleTimestamp,
        source,
        timeDiff
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${pair} –Ω–∞ –º–æ–º–µ–Ω—Ç ${timestamp}:`, error);
      throw error;
    }
  }

  /**
   * üöÄ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
   */
  getCacheStats() {
    const now = Date.now();
    const pairs = [];
    
    this.priceCache.forEach((value, key) => {
      pairs.push({
        pair: key,
        price: value.price,
        age: Math.round((now - value.timestamp) / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        source: value.source
      });
    });
    
    return {
      totalPairs: pairs.length,
      pairs: pairs.sort((a, b) => a.age - b.age), // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
      wsConnections: {
        otc: this.wsConnections.otc?.readyState === 1,
        polygon: this.wsConnections.polygon?.readyState === 1,
        polygonCrypto: this.wsConnections.polygonCrypto?.readyState === 1
      }
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
   * @param {string} pair - –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
   * @returns {Promise<boolean>}
   */
  async isPairValid(pair) {
    const validPairs = [
      // OTC Forex (20 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä)
      'EUR/USD OTC', 'AUD/CAD OTC', 'USD/JPY OTC', 'AUD/JPY OTC', 'GBP/USD OTC', 'GBP/CAD OTC', 'EUR/CAD OTC', 'CHF/JPY OTC', 'CAD/CHF OTC', 'USD/CHF OTC', 'USD/CAD OTC', 'GBP/AUD OTC', 'AUD/CHF OTC', 'EUR/CHF OTC', 'GBP/CHF OTC', 'CAD/JPY OTC', 'EUR/JPY OTC', 'GBP/JPY OTC', 'EUR/GBP OTC', 'AUD/USD OTC',
      // OTC Forex (30 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä)
      'USD/UAH OTC', 'USD/RUB OTC', 'NZD/USD OTC', 'EUR/AUD OTC', 'NZD/JPY OTC', 'AUD/NZD OTC', 'EUR/NZD OTC', 'GBP/NZD OTC', 'NZD/CHF OTC', 'NZD/CAD OTC', 'USD/CNY OTC', 'EUR/CNY OTC', 'GBP/CNY OTC', 'USD/INR OTC', 'EUR/INR OTC', 'GBP/INR OTC', 'EUR/RUB OTC', 'GBP/RUB OTC', 'EUR/UAH OTC', 'GBP/UAH OTC', 'USD/MXN OTC',
      // OTC Crypto (10 –ø–∞—Ä)
      'BTC/USD OTC', 'ETH/USD OTC', 'LTC/USD OTC', 'XRP/USD OTC', 'SOL/USD OTC', 'ADA/USD OTC', 'DOT/USD OTC', 'MATIC/USD OTC', 'AVAX/USD OTC', 'LINK/USD OTC',
      // Forex (20 –ø–∞—Ä)
      'EUR/USD', 'AUD/CAD', 'USD/JPY', 'AUD/JPY', 'GBP/USD', 'GBP/CAD', 'EUR/CAD', 'CHF/JPY', 'CAD/CHF', 'USD/CHF', 'USD/CAD', 'GBP/AUD', 'AUD/CHF', 'EUR/CHF', 'GBP/CHF', 'CAD/JPY', 'EUR/JPY', 'AUD/JPY', 'EUR/GBP', 'GBP/JPY',
      // Crypto (10 –ø–∞—Ä)
      'BTC/USD', 'ETH/USD', 'LTC/USD', 'XRP/USD', 'SOL/USD', 'ADA/USD', 'DOT/USD', 'MATIC/USD', 'AVAX/USD', 'LINK/USD'
    ];

    return validPairs.includes(pair);
  }
}

module.exports = new PriceService();

