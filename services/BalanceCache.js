/**
 * üí∞ BalanceCache - In-memory –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –£—Å–∫–æ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫ –Ω–∞ 50-100ms –∑–∞ —Å—á–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
 */

class BalanceCache {
  constructor() {
    this.cache = new Map(); // userId -> { demoBalance, realBalance, updatedAt }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –∫—ç—à–∞
   */
  get(userId) {
    const cached = this.cache.get(userId.toString());
    if (!cached) return null;
    
    const age = Date.now() - cached.updatedAt;
    const MAX_AGE = 5 * 1000; // 5 —Å–µ–∫—É–Ω–¥
    
    if (age > MAX_AGE) {
      // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª - —É–¥–∞–ª—è–µ–º
      this.cache.delete(userId.toString());
      return null;
    }
    
    return cached;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –∫—ç—à–µ
   */
  set(userId, demoBalance, realBalance) {
    this.cache.set(userId.toString(), {
      demoBalance,
      realBalance,
      updatedAt: Date.now()
    });
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  invalidate(userId) {
    this.cache.delete(userId.toString());
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  clear() {
    this.cache.clear();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats() {
    return {
      size: this.cache.size,
      entries: Array.from(this.cache.keys())
    };
  }
}

// Singleton instance
const balanceCache = new BalanceCache();

module.exports = balanceCache;

