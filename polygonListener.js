const WebSocket = require('ws');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const PolygonCandle = require('./models/PolygonCandle');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = process.env.MONGODB_URI;
const DB_NAME = process.env.DB_NAME || 'vsepoluchitsa_db';
const RELAY_URL = process.env.QUOTES_WS_URL || 'ws://localhost:8080';

// üî• –ö–†–ò–¢–ò–ß–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Polygon
function validateCandleData(msg) {
  if (!msg || typeof msg !== 'object') return false;
  if (!msg.pair || typeof msg.o !== 'number' || typeof msg.c !== 'number' || 
      typeof msg.h !== 'number' || typeof msg.l !== 'number' || typeof msg.v !== 'number') {
    return false;
  }
  
  if (!isFinite(msg.o) || !isFinite(msg.c) || !isFinite(msg.h) || !isFinite(msg.l)) {
    console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç Polygon: o=${msg.o}, c=${msg.c}, h=${msg.h}, l=${msg.l}`);
    return false;
  }
  
  if (msg.h < msg.l) {
    console.warn(`‚ö†Ô∏è High < Low –æ—Ç Polygon: h=${msg.h}, l=${msg.l}`);
    return false;
  }
  
  if (!isFinite(msg.v) || msg.v < 0) {
    console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π volume –æ—Ç Polygon: v=${msg.v}`);
    return false;
  }
  
  return true;
}

// üî• –ö–†–ò–¢–ò–ß–ù–û: –¢–µ–∫—É—â–∏–µ –∂–∏–≤—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –ö–ê–ñ–î–û–ô –ø–∞—Ä—ã (Map: pair ‚Üí candle)
const currentCandles = new Map();

// üî• –ö–†–ò–¢–ò–ß–ù–û: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç memory leak)
const MAX_HISTORY_SIZE = 100;
const candleHistory = [];

console.log('Polygon Listener –∑–∞–ø—É—â–µ–Ω. 5 Forex –ø–∞—Ä (EUR/USD, AUD/CAD, USD/JPY, AUD/JPY, GBP/USD), 5-—Å–µ–∫ —Å–≤–µ—á–∏');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
mongoose.connect(MONGODB_URI, {
  dbName: DB_NAME
}).then(() => {
  console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
}).catch(err => {
  console.error('MongoDB –æ—à–∏–±–∫–∞:', err.message);
  process.exit(1);
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞—à–µ–º—É Relay
console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Relay...\n');
const ws = new WebSocket(RELAY_URL);

ws.on('open', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Relay');
  
  // üè† ROOM-BASED: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –í–°–ï 20 Forex –ø–∞—Ä
  const forexPairs = [
    'EUR/USD', 'AUD/CAD', 'USD/JPY', 'AUD/JPY', 'GBP/USD',
    'GBP/CAD', 'EUR/CAD', 'CHF/JPY', 'CAD/CHF', 'USD/CHF',
    'USD/CAD', 'GBP/AUD', 'AUD/CHF', 'EUR/CHF', 'GBP/CHF',
    'CAD/JPY', 'EUR/JPY', 'GBP/JPY', 'EUR/GBP', 'AUD/JPY'
  ];
  
  forexPairs.forEach(pair => {
    ws.send(JSON.stringify({
      action: 'subscribe',
      pair: pair
    }));
  });
  
  console.log('üìå Listener –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞', forexPairs.length, 'Forex –ø–∞—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î\n');
});

ws.on('message', (data) => {
  try {
    const msg = JSON.parse(data.toString());
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CAS —Å–æ–±—ã—Ç–∏—è (1-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã) –¥–ª—è –≤—Å–µ—Ö Forex –ø–∞—Ä
    if (msg.ev === 'CAS') {
        // üî• –ö–†–ò–¢–ò–ß–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Polygon
        if (!validateCandleData(msg)) {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å–≤–µ—á—É –æ—Ç Polygon –¥–ª—è ${msg.pair}`);
          return;
        }
        
        const tickTime = msg.s; // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ 1-—Å–µ–∫—É–Ω–¥–Ω–æ–π —Å–≤–µ—á–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const pairName = msg.pair; // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã (EUR/USD, AUD/CAD –∏ —Ç.–¥.)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º 5-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –æ–∫–Ω–æ
        const candleWindowStart = Math.floor(tickTime / 5000) * 5000;
        const candleWindowEnd = candleWindowStart + 5000;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É –î–õ–Ø –≠–¢–û–ô –ü–ê–†–´
        let currentCandle = currentCandles.get(pairName);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (!currentCandle || currentCandle.startTime !== candleWindowStart) {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É
          if (currentCandle && currentCandle.isLive) {
            const closedCandle = { ...currentCandle, isLive: false };
            candleHistory.unshift(closedCandle);
            // üî• –ö–†–ò–¢–ò–ß–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç memory leak)
            if (candleHistory.length > MAX_HISTORY_SIZE) {
              candleHistory.length = MAX_HISTORY_SIZE;
            }
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
            const time = new Date(closedCandle.startTime).toLocaleTimeString('ru-RU');
            const direction = closedCandle.close >= closedCandle.open ? '‚ñ≤' : '‚ñº';
            console.log(`[${pairName}] ${time} ${direction} O:${closedCandle.open.toFixed(5)} H:${closedCandle.high.toFixed(5)} L:${closedCandle.low.toFixed(5)} C:${closedCandle.close.toFixed(5)} V:${closedCandle.volume}`);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–≤–µ—á—É –≤ –ë–î (isClosed: true)
            PolygonCandle.updateOne(
              { pair: closedCandle.pair, startTime: closedCandle.startTime },
              { 
                $set: { 
                  isClosed: true,
                  close: closedCandle.close,
                  high: closedCandle.high,
                  low: closedCandle.low,
                  volume: closedCandle.volume
                } 
              }
            ).catch(err => console.error(`  [${pairName}] ‚Üí –û—à–∏–±–∫–∞ –ë–î:`, err.message));
          }
          
          // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é 5-—Å–µ–∫—É–Ω–¥–Ω—É—é —Å–≤–µ—á—É
          // –í–ê–ñ–ù–û: open –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ = close –ø—Ä–µ–¥—ã–¥—É—â–µ–π –î–õ–Ø –≠–¢–û–ô –ñ–ï –ü–ê–†–´
          const previousClose = currentCandle ? currentCandle.close : msg.o;
          
          currentCandle = {
            pair: pairName.replace('/', ''), // üî• –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PriceService
            open: previousClose,
            close: msg.c,
            high: Math.max(previousClose, msg.h),
            low: Math.min(previousClose, msg.l),
            volume: msg.v,
            startTime: candleWindowStart,
            endTime: candleWindowEnd,
            isLive: true
          };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Map –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
          currentCandles.set(pairName, currentCandle);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É –≤ —Ç–æ–º –∂–µ 5-—Å–µ–∫—É–Ω–¥–Ω–æ–º –æ–∫–Ω–µ
          currentCandle.close = msg.c;
          // üî• –ö–†–ò–¢–ò–ß–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º close –≤ high/low!
          currentCandle.high = Math.max(currentCandle.high, msg.h, msg.c);
          currentCandle.low = Math.min(currentCandle.low, msg.l, msg.c);
          currentCandle.volume += msg.v;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Map
          currentCandles.set(pairName, currentCandle);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–≤–µ—á—É –≤ –ë–î
        PolygonCandle.updateOne(
          { pair: currentCandle.pair, startTime: currentCandle.startTime },
          { 
            $set: {
              open: currentCandle.open,
              close: currentCandle.close,
              high: currentCandle.high,
              low: currentCandle.low,
              volume: currentCandle.volume,
              endTime: currentCandle.endTime,
              timeframe: 5,
              isClosed: false
            }
          },
          { upsert: true } // –°–æ–∑–¥–∞—ë–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ).catch(err => console.error(`[${pairName}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:`, err.message));
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
  }
});

ws.on('error', (err) => {
  console.error('Relay –æ—à–∏–±–∫–∞:', err.message);
});

ws.on('close', () => {
  console.log('üî¥ Relay –æ—Ç–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  setTimeout(() => process.exit(1), 3000);
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log(`\n\n–í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${candleHistory.length}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: ${currentCandles.size}`);
  currentCandles.forEach((candle, pair) => {
    console.log(`  ${pair}: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ${new Date(candle.startTime).toLocaleTimeString('ru-RU')}`);
  });
  ws.close();
  await mongoose.connection.close();
  console.log('MongoDB –∑–∞–∫—Ä—ã—Ç–∞');
  process.exit(0);
});

