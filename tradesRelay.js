/**
 * üîí TRADES WebSocket Relay - Event-Driven —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
 * 
 * BEST PRACTICES:
 * 1. –û—Ç–¥–µ–ª—å–Ω—ã–π WS –¥–ª—è User Data (–Ω–µ –º–µ—à–∞–µ—Ç—Å—è —Å Market Data)
 * 2. JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 * 3. Room-based routing (–∫–∞–∂–¥—ã–π —é–∑–µ—Ä –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ)
 * 4. Heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * 5. Graceful shutdown
 * 
 * –°–û–ë–´–¢–ò–Ø:
 * - tradeCreated: –ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞
 * - tradeUpdated: –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ (won/lost)
 * - balanceUpdated: –ö–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
 */

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
require('dotenv').config();

const WebSocket = require('ws');
const jwt = require('jsonwebtoken');
const EventEmitter = require('events');

// üî• Event Emitter –¥–ª—è in-process communication
const internalEmitter = new EventEmitter();

const PORT = process.env.TRADES_PORT || process.env.TRADES_WS_PORT || 8083;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ userId
const clients = new Map(); // userId -> Set<WebSocket>

// ============================================
// üî• –°–û–ó–î–ê–ù–ò–ï –°–ï–†–í–ï–†–ê (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é!)
// ============================================
let wss = null;

// ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ require)
if (require.main === module) {
  // –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
  wss = new WebSocket.Server({ 
    port: PORT,
    clientTracking: true 
  });

  console.log(`üîí Trades WebSocket Relay –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:${PORT}`);
  
  // üî• –ó–∞–ø—É—Å–∫–∞–µ–º TradeWorker –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ!
  const mongoose = require('mongoose');
  mongoose.connect(process.env.MONGODB_URI, {
    dbName: process.env.DB_NAME || 'vsepoluchitsa_db'
  })
  .then(() => {
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è TradeWorker');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º worker
    const TradeWorker = require('./workers/TradeWorker');
    TradeWorker.start();
    console.log('ü§ñ TradeWorker –∑–∞–ø—É—â–µ–Ω –≤ Trades –ø—Ä–æ—Ü–µ—Å—Å–µ');
  })
  .catch((error) => {
    console.error('‚ùå MongoDB –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
  
} else {
  // –§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ require - –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  console.log('‚ÑπÔ∏è tradesRelay –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–æ–¥—É–ª—å (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)');
}

// ============================================
// üî• –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
// ============================================

// ============================================
// üî• IN-PROCESS EVENT LISTENER (–¥–ª—è TradeWorker)
// ============================================

internalEmitter.on('sendToUser', ({ userId, event, data }) => {
  sendToUser(userId, event, data);
});

// ============================================
// üî• –û–ë–†–ê–ë–û–¢–ö–ê –í–ù–ï–®–ù–ò–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
// ============================================

if (wss) {
  wss.on('connection', (ws, req) => {
  let userId = null;
  let isAuthenticated = false;
  let heartbeatInterval = null;

  console.log('üì° –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Trades WS');

  // ============================================
  // üî• HEARTBEAT (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
  // ============================================
  
  ws.isAlive = true;
  ws.on('pong', () => {
    ws.isAlive = true;
  });

  heartbeatInterval = setInterval(() => {
    if (ws.isAlive === false) {
      console.log(`üíÄ –ö–ª–∏–µ–Ω—Ç ${userId || '–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º`);
      return ws.terminate();
    }
    ws.isAlive = false;
    ws.ping();
  }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

  // ============================================
  // üî• –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
  // ============================================
  
  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data);

      // ============================================
      // üî• –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
      // ============================================
      
      if (message.action === 'auth') {
        try {
          const token = message.token;
          if (!token) {
            ws.send(JSON.stringify({
              event: 'error',
              message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            }));
            ws.close(1008, 'Unauthorized');
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT
          const decoded = jwt.verify(token, JWT_SECRET);
          userId = decoded.userId;
          isAuthenticated = true;

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É userId
          if (!clients.has(userId)) {
            clients.set(userId, new Set());
          }
          clients.get(userId).add(ws);

          console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${userId} (email: ${decoded.email || 'N/A'})`);
          console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è ${userId}: ${clients.get(userId).size}`);

          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          ws.send(JSON.stringify({
            event: 'authenticated',
            userId: userId,
            timestamp: Date.now()
          }));

        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
          ws.send(JSON.stringify({
            event: 'error',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'
          }));
          ws.close(1008, 'Invalid token');
        }
        return;
      }

      // ============================================
      // üî• –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
      // ============================================
      
      if (!isAuthenticated) {
        ws.send(JSON.stringify({
          event: 'error',
          message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ { action: "auth", token: "..." }'
        }));
        return;
      }

      // ============================================
      // üî• PING-PONG (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
      // ============================================
      
      if (message.action === 'ping') {
        ws.send(JSON.stringify({
          event: 'pong',
          timestamp: Date.now()
        }));
        return;
      }

      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç ${userId}:`, message.action);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      ws.send(JSON.stringify({
        event: 'error',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
      }));
    }
  });

  // ============================================
  // üî• –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø
  // ============================================
  
  ws.on('close', () => {
    if (heartbeatInterval) {
      clearInterval(heartbeatInterval);
    }

    if (userId && clients.has(userId)) {
      clients.get(userId).delete(ws);
      if (clients.get(userId).size === 0) {
        clients.delete(userId);
        console.log(`üëã –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${userId} –∑–∞–∫—Ä—ã—Ç—ã`);
      } else {
        console.log(`üëã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è ${userId} (–æ—Å—Ç–∞–ª–æ—Å—å: ${clients.get(userId).size})`);
      }
    } else {
      console.log('üëã –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  });

  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
  });
  });
} // –∫–æ–Ω–µ—Ü if (wss)

// ============================================
// üî• –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø BROADCAST
// ============================================

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
 * @param {object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 */
function sendToUser(userId, event, data) {
  if (!clients.has(userId)) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —ç—Ç–æ OK, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return;
  }

  const message = JSON.stringify({
    event,
    data,
    timestamp: Date.now()
  });

  const userClients = clients.get(userId);
  let sentCount = 0;

  userClients.forEach((ws) => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(message);
      sentCount++;
    }
  });

  if (sentCount > 0) {
    console.log(`üì§ –°–æ–±—ã—Ç–∏–µ "${event}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${userId} (${sentCount} –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
  }
}

/**
 * Broadcast –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º (—Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
 * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
 * @param {object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 */
function broadcastToAll(event, data) {
  if (!wss) {
    console.warn('‚ö†Ô∏è WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, broadcast –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
    return;
  }

  const message = JSON.stringify({
    event,
    data,
    timestamp: Date.now()
  });

  let sentCount = 0;
  wss.clients.forEach((ws) => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(message);
      sentCount++;
    }
  });

  console.log(`üì£ Broadcast "${event}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º (${sentCount} –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function getStats() {
  return {
    totalUsers: clients.size,
    totalConnections: wss ? wss.clients.size : 0,
    users: Array.from(clients.entries()).map(([userId, connections]) => ({
      userId,
      connections: connections.size
    }))
  };
}

// ============================================
// üî• GRACEFUL SHUTDOWN
// ============================================

if (wss) {
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º Trades WebSocket...');
    
    wss.clients.forEach((ws) => {
      ws.close(1000, 'Server shutting down');
    });

    wss.close(() => {
      console.log('‚úÖ Trades WebSocket –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });

    // –§–æ—Ä—Å –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('‚ö†Ô∏è –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ');
      process.exit(1);
    }, 5000);
  });
}

// ============================================
// üî• –≠–ö–°–ü–û–†–¢
// ============================================

module.exports = {
  wss,
  sendToUser,
  broadcastToAll,
  getStats,
  internalEmitter // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è TradeWorker!
};

